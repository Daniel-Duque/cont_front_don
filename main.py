#Original From Daniel Duque Lozano
# -*- coding: utf-8 -*-
"""analisis_territorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AQnWOCqJUWkHUKJg-HgLbDXsLa72uWoS
"""


import pandas as pd
import os
import PIL

import streamlit as st

import datetime
link_image=r"imagenes/ID_SAPO_ID_SAPO_colores.svg"

st.set_page_config(layout='wide')
st.logo(link_image, icon_image=link_image,size="large")

filtrado1=pd.read_csv(r"data/dicc/Ciudades.csv").sort_values(["Departamento Entidad","Ciudad Entidad"],ascending=False)

extrange="Tama√±o valor extra√±o"

resulting=pd.read_csv(r"data/cleaned0.csv")

st.title("Banderas rojas contrataci√≥n p√∫blica preliminar (valores en millones de pesos)")
pd.set_option("styler.render.max_elements", 8600000)
tab0,tab1= st.tabs(["Corrupci√≥n cero","comunicaci√≥n"])

    
agroupados=pd.read_csv(r"data/groupedcit.csv")


today = datetime.datetime.now()
year = today.year 
jan_1 = datetime.date(year-1, 1, 1)
dec_31 = datetime.date(year, 12, 31)




with tab0:
  
    if "app_runs" not in st.session_state:
        st.session_state.app_runs = 0
        st.session_state.fragment_runs = 0
    @st.fragment
    def select_df():
        st.session_state.fragment_runs += 1
        depto=st.selectbox("Departamento Entidad",
                           pd.unique(filtrado1["Departamento Entidad"]),key=2)
        muni=st.selectbox("Ciudad Entidad",
                           pd.unique(filtrado1[filtrado1["Departamento Entidad"]==depto]["Ciudad Entidad"]),key=3)
        #text search taken from https://blog.streamlit.io/create-a-search-engine-with-streamlit-and-google-sheets/
    
    
    
        on = st.toggle("Opciones extra")
        text_search=""
        ini=jan_1
        fini=dec_31
        tmi=False
        tmi2=False
        name_search=""
        entit_search=""
        if on:
            text_search = st.text_input("Busca contratos seg√∫n la descripci√≥n.", value="")
            name_search = st.text_input("Busca contratos seg√∫n el nombre del proveedor.", value="")
            entit_search = st.text_input("Busca contratos seg√∫n la entidad contratante.", value="")
            d = st.date_input(
                "",
                (jan_1, datetime.date(year, 5, 13)),
                jan_1,
                dec_31,
                format="MM.DD.YYYY",
            )
            ini=d[0]
            try:
                fini=d[1]
            except:
                ...
            tmi=st.toggle("recibir mucha informaci√≥n de cada contrato")
            #tmi2=st.toggle("recibir todos los contratos de mi ciudad (el proceso ser√° lento)")
            
        linksave=r"data/particular"
        try:
            terri=pd.DataFrame(columns=["Nombre Entidad",
                    "Descripcion del Proceso","Valor real","Valor Proyectado",'Duraci√≥n del contrato',"Tipo de Contrato","Proveedor Adjudicado","Fecha de Firma",
                    "URLProceso"])
            n=0
            for i in os.listdir(linksave):
                largo_texto=len(depto.upper()+"-"+muni.upper())
                if i[0:largo_texto]==depto.upper()+"-"+muni.upper():
                    terri2=pd.read_csv(linksave+"//"+i)[["Nombre Entidad",
                            "Descripcion del Proceso","Valor real","Valor Proyectado",'Duraci√≥n del contrato',"Tipo de Contrato","Proveedor Adjudicado","Fecha de Firma",
                            "URLProceso"]]
                    terri=pd.concat([terri,terri2])
                    if not tmi2:
                        break
                    
        except Exception as e:
            st.error('No encontramos contratos para este municipio en los periodos que se tienen en cuenta', icon="üö®")
            return False
        terri=terri.reset_index()
        try:
            terri["frecuenc"]=terri['Duraci√≥n del contrato'].apply(lambda x: x.split(" ")[1] if len(x.split(" "))>1 else "Mes(es)")
            
            terri["momentoc"]=terri['Duraci√≥n del contrato'].apply(lambda x:int(x.split(" ")[0]) if len(x.split(" "))>1 else 1)
            terri["dias"]=terri.apply(lambda row:int(row["momentoc"])*30 if row["frecuenc"]=='Mes(es)' else int(row["momentoc"]),axis=1)
            terri["dias"]=terri["dias"].apply(lambda x: x if x>0 else 1)
            terri["valor proyectado por d√≠a"]=terri.apply(lambda row: row['Valor Proyectado']/row["dias"],axis=1)
        except Exception as e:
            st.error('tuvimos una dificultad con los datos de este municipio', icon="üö®")
            return False
        terri["valor real por d√≠a"]=terri.apply(lambda row: row['Valor real']/row["dias"],axis=1)
        terri["Fecha de Firma"]=pd.to_datetime(terri["Fecha de Firma"], format='%m/%d/%Y').dt.date
        terri["distancia real-proyectado"]=(terri["Valor real"]-terri["Valor Proyectado"])
        terri["diferencia porcentual"]=(terri["Valor real"]-terri["Valor Proyectado"])/terri["Valor Proyectado"]
        terri=terri[terri["Fecha de Firma"]>ini]
        terri=terri[terri["Fecha de Firma"]<=fini]            
        m1 = terri["Descripcion del Proceso"].str.lower().str.contains(
            text_search,case=False) & terri["Proveedor Adjudicado"].str.lower().str.contains(
                name_search,case=False) & terri["Nombre Entidad"].str.lower().str.contains(
                    entit_search,case=False)
        terri["diferencia porcentual absoluta"]=terri["diferencia porcentual"].abs()
        terri=terri.sort_values("diferencia porcentual absoluta",ascending=True)
        if tmi:
            valores=['Nombre Entidad', 'Descripcion del Proceso', 'Valor real',
                   'Valor Proyectado',"valor real por d√≠a","valor proyectado por d√≠a","distancia real-proyectado","diferencia porcentual absoluta", 'Tipo de Contrato',"Proveedor Adjudicado"
                   ,'Duraci√≥n del contrato', 'Fecha de Firma', 'URLProceso',
                   ]
        else:
            valores=['Nombre Entidad', 'Descripcion del Proceso', 'Valor real',
                   'Valor Proyectado',"distancia real-proyectado","diferencia porcentual absoluta", 'Tipo de Contrato',"Proveedor Adjudicado", 'URLProceso',
                   ]
        
        
        terri = terri[valores]
        
        df_search = terri[m1]
        if df_search.empty:
            st.error('No encontramos contratos para este municipio en los periodos que se tienen en cuenta', icon="üö®")
        elif text_search or name_search:
            st.dataframe(df_search.style.map(lambda x:
                        f"background-color: { '#C34C31' if x>1000 else '#D9841B' if x>=100 else '#009966' if x>=50 else '#20B4B1' if x>=20 else '#6574B1'}", subset="distancia real-proyectado"), 
                         column_config={
                "diferencia porcentual absoluta": st.column_config.ProgressColumn(
                    "diferencia porcentual absoluta",
                    help="Que tan extra√±o nos parece el contrato seg√∫n nuestras m√©tricas",
                    min_value=0,
                    max_value=1,
                ),"URLProceso": st.column_config.LinkColumn("URLProceso")
            },
            hide_index=True,)
        else:
            st.dataframe(terri.style.map(lambda x: f"background-color: { '#C34C31' if x>1000 else '#D9841B' if x>=100 else '#009966' if x>=50 else '#20B4B1' if x>=20 else '#6574B1'}", subset="distancia real-proyectado"), 
                         column_config={
                "diferencia porcentual absoluta": st.column_config.ProgressColumn(
                    "diferencia porcentual absoluta",
                    help="Que tan extra√±o nos parece el contrato seg√∫n nuestras m√©tricas",
                    min_value=0,
                    max_value=1,
                ),"URLProceso": st.column_config.LinkColumn("URLProceso")
            },
            hide_index=True,) 
    
    select_df()
    st.info('Los valores proyectados son resultado de un conjunto de modelos de inteligencia artificial, por lo que pueden mostrar resultados imperfectos ', icon="‚ÑπÔ∏è")
    url="https://github.com/Daniel-Duque/cont_front_don"
    st.write("para descargar los datasets completos puedes entrar aqui [link](%s)" % url)

with tab1:
  
    
    
    
    resultingcom=pd.read_csv(r"data/cleanedcomu"+".csv")   
    resulting[extrange]=resulting[extrange].abs()
    resulting=resulting.sort_values(extrange,ascending=True)
    st.dataframe(resultingcom.style.background_gradient(axis=None, cmap="Reds"), 
                 column_config={
        extrange: st.column_config.BarChartColumn(
            extrange,
            help="Que tan extra√±o nos parece el contrato seg√∫n nuestras m√©tricas",
            y_min=0,
            y_max=1,
        ),
    },
    hide_index=True,)  